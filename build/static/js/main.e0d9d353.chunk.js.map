{"version":3,"sources":["components/Header.js","Helper.js","components/Formulario.js","components/Resultado.js","components/Resumen.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["ComponenteHeader","styled","header","CTexto","h1","Header","titulo","aMayuscula","texto","toUpperCase","slice","Button","button","CError","div","Formulario","setDatos","setCargando","useState","marca","year","plan","setFormulario","Error","setError","setInformation","e","target","name","value","onSubmit","preventDefault","trim","resultado","diferencia","Date","getFullYear","obtenerYears","incremento","calcularMarca","parseFloat","calculaPlan","toFixed","setTimeout","Number","datos","className","onChange","type","checked","Mensaje","p","DivCotizacion","Cotizacion","Resultado","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","CResumen","Resumen","Spinner","Contenedor","ConFormulario","App","Datos","cargando","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2kBAGA,IAAMA,EAAmBC,IAAOC,OAAV,KAMhBC,EAASF,IAAOG,GAAV,KAkBGC,EAXA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,KAASG,K,eCwBd,SAASC,EAAWC,GACvB,OAAOA,EAAM,GAAGC,cAAgBD,EAAME,MAAM,G,2mBCvChD,IAAMC,EAASV,IAAOW,OAAV,KAkBNC,EAASZ,IAAOa,IAAV,KA8IGC,EApII,YAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAAiB,EAERC,mBAAS,CACzCC,MAAO,GACPC,KAAM,GACNC,KAAM,KALkC,mBAErCN,EAFqC,KAEzBO,EAFyB,OASlBJ,oBAAS,GATS,mBASrCK,EATqC,KAS9BC,EAT8B,KAYpCL,EAAsBJ,EAAtBI,MAAOC,EAAeL,EAAfK,KAAMC,EAASN,EAATM,KAGfI,EAAiB,SAACC,GACpBJ,EAAc,2BACPP,GADM,kBAERW,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAyClC,OACI,kBAAC,WAAD,KACKN,EAAQ,kBAACV,EAAD,8CAAwD,KACjE,0BAAMiB,SAvCO,SAACJ,GAIlB,GAHAA,EAAEK,iBAGmB,KAAjBZ,EAAMa,QAAiC,KAAhBZ,EAAKY,QAAiC,KAAhBX,EAAKW,OAAtD,CAIAR,GAAS,GACT,IAAIS,EAAY,IAEZC,EDjEL,SAAsBd,GACzB,OAAO,IAAIe,MAAOC,cAAgBhB,ECgEbiB,CAAajB,GAG9Ba,GAA2B,EAAbC,EAAiBD,EAAa,IAM5CA,GDtED,SAAuBd,GAC1B,IAAImB,EACJ,OAAQnB,GACJ,IAAK,WACDmB,EAAa,KACb,MACJ,IAAK,UACDA,EAAa,IACb,MACJ,IAAK,YACDA,EAAa,KAMrB,OAAOA,ECsDUC,CAAcpB,GAI3Bc,GAAaO,WDvDd,SAAqBnB,GACxB,IAAIiB,EAEJ,OAAQjB,GACJ,IAAK,SACDiB,EAAa,IACb,MAEJ,IAAK,WACDA,EAAa,IAMrB,OAAOA,ECwCqBG,CAAYpB,IAAOqB,QAAQ,GAGnDzB,GAAY,GACZ0B,YAAW,WACP1B,GAAY,GACZD,EAAS,CACLiB,UAAWW,OAAOX,GAClBY,MAAO9B,MAEZ,UA7BCS,GAAS,KAmCL,yBAAKsB,UAAU,cACX,wCACA,4BACIA,UAAU,eACVlB,KAAK,QACLC,MAAOV,EACP4B,SAAUtB,GAEV,4BAAQI,MAAM,IAAd,iBACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,cAGR,yBAAKiB,UAAU,cACX,uCACA,4BACIA,UAAU,eACVlB,KAAK,OACLC,MAAOT,EACP2B,SAAUtB,GAEV,4BAAQI,MAAM,IAAd,oBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,UAIR,yBAAKiB,UAAU,mBACX,2BAAOA,UAAU,YAAjB,QACA,2BACIE,KAAK,QACLF,UAAU,OACVlB,KAAK,OACLC,MAAM,SACNoB,QAAkB,WAAT5B,EACT0B,SAAUtB,IARlB,SAWI,2BACIuB,KAAK,QACLF,UAAU,OACVlB,KAAK,OACLC,MAAM,WACNoB,QAAkB,aAAT5B,EACT0B,SAAUtB,IAjBlB,YAsBA,kBAACd,EAAD,CAAQqC,KAAK,UAAb,wB,+mBCrJhB,IAAME,EAAUjD,IAAOkD,EAAV,KAOPC,EAAgBnD,IAAOkD,EAAV,KASbE,EAAapD,IAAOkD,EAAV,KAmCDG,EA3BG,SAAC,GAAmB,IAAjBrB,EAAgB,EAAhBA,UACjB,OAAqB,IAAdA,EACH,kBAACiB,EAAD,2FAKA,kBAACE,EAAD,KACI,kBAACG,EAAA,EAAD,CACIC,UAAU,OACVV,UAAU,aAEV,kBAACW,EAAA,EAAD,CACIC,WAAW,YACXC,IAAK1B,EACL2B,QAAS,CAACC,MAAO,IAAKC,KAAM,MAE5B,kBAACT,EAAD,0BAA8B,8BAAOpB,Q,6LCzCzD,IAAM8B,EAAW9D,IAAOa,IAAV,KA4BCkD,EApBC,SAAC,GAAe,IAAbnB,EAAY,EAAZA,MACP1B,EAAsB0B,EAAtB1B,MAAOC,EAAeyB,EAAfzB,KAAMC,EAASwB,EAATxB,KACrB,MAAc,KAAVF,GAAyB,KAATC,GAAwB,KAATC,EACxB,KAIP,kBAAC0C,EAAD,KACI,gDACA,qCAAWxD,EAAWY,IACtB,oCAAUZ,EAAWc,IACrB,oCAAUD,KCZP6C,G,MATC,WACZ,OACI,yBAAKnB,UAAU,WACrB,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,sB,2OCEjB,IAAMoB,EAAajE,IAAOa,IAAV,KAIVqD,EAAgBlE,IAAOa,IAAV,KAsCJsD,MAjCf,WAAe,MAEelD,mBAAS,CAC/Be,UAAW,EACXY,MAAO,CACH1B,MAAO,GACPC,KAAM,GACNC,KAAM,MAPH,mBAEJgD,EAFI,KAEGrD,EAFH,OAYqBE,oBAAS,GAZ9B,mBAYJoD,EAZI,KAYMrD,EAZN,KAcHgB,EAAqBoC,EAArBpC,UAAWY,EAAUwB,EAAVxB,MACnB,OACI,kBAACqB,EAAD,KACI,kBAAC,EAAD,CAAQ5D,OAAQ,yBAChB,kBAAC6D,EAAD,KACI,kBAAC,EAAD,CAAYnD,SAAUA,EAAUC,YAAaA,IAC5CqD,EACG,kBAAC,EAAD,MAEA,kBAAC,WAAD,KACI,kBAAC,EAAD,CAASzB,MAAOA,IAChB,kBAAC,EAAD,CAAWZ,UAAWA,QC/B1BsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e0d9d353.chunk.js","sourcesContent":["import React from 'react'\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\nconst ComponenteHeader = styled.header`\n    background-color: #26C6DA;\n    padding: 10px;\n    font-weight: bold;\n    color: #ffffff\n`;\nconst CTexto = styled.h1`\n    font-size: 2rem;\n    margin: 0;\n    font-family: 'Slabo 27px', serif;\n    text-align: center;\n`;\n\nconst Header = ({titulo}) => {\n    return (\n        <ComponenteHeader> \n            <CTexto>{titulo}</CTexto>\n        </ComponenteHeader>\n    )\n}\n Header.propTypes ={\n     titulo: PropTypes.string.isRequired\n };\n \nexport default Header;","\n\nexport function obtenerYears(year){\n    return new Date().getFullYear() - year;\n}\n\nexport function calcularMarca(marca){\n    let incremento;\n    switch (marca) {\n        case 'asiatico':\n            incremento = 1.05;\n            break;\n        case 'europeo' : \n            incremento = 1.30;\n            break;\n        case 'americano': \n            incremento = 1.15;\n            break;\n        default:\n            break;\n    }\n\n    return incremento;\n}\n\nexport function calculaPlan(plan){\n    let incremento; \n\n    switch (plan) {\n        case 'basico':\n            incremento = 1.20;        \n            break;\n    \n        case 'completo' :\n            incremento = 1.50;\n            break;\n        default:\n            break;\n    }\n\n    return incremento;\n}\n\nexport function aMayuscula(texto){\n    return texto[0].toUpperCase() + texto.slice(1);\n}","import React, { Fragment, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { obtenerYears, calcularMarca, calculaPlan } from \"../Helper.js\";\nimport PropTypes from \"prop-types\";\n\nconst Button = styled.button`\n    background-color: #00838f;\n    font-size: 16px;\n    width: 100%;\n    padding: 1rem;\n    color: #fff;\n    text-transform: uppercase;\n    font-weight: bold;\n    border: none;\n    transition: background-color 0.3s ease;\n    margin-top: 2rem;\n\n    &:hover {\n        background-color: #26c6da;\n        cursor: pointer;\n    }\n`;\n\nconst CError = styled.div`\n    background-color: red;\n    color: white;\n    padding: 1rem;\n    width: 100%;\n    text-align: center;\n    margin-bottom: 2rem;\n\n`\n\nconst Formulario = ({setDatos, setCargando}) => {\n    //state para guardar los datos del formulario\n    const [Formulario, setFormulario] = useState({\n        marca: \"\",\n        year: \"\",\n        plan: \"\",\n    });\n\n    //state de error\n    const [Error, setError] = useState(false);\n\n    //destructuring al state de formularios\n    const { marca, year, plan } = Formulario;\n\n    //funcion que guarda los datos\n    const setInformation = (e) => {\n        setFormulario({\n            ...Formulario,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    //funcion de submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //validacion\n        if (marca.trim() === \"\" || year.trim() === \"\" || plan.trim() === \"\") {\n            setError(true);\n            return;\n        }\n        setError(false);\n        let resultado = 2000;\n        //obtener la diferencia de years\n        let diferencia = obtenerYears(year);\n                \n        //por cada year hay que restar el 3%\n        resultado -= (diferencia * 3 * resultado) / 100;\n        \n        \n        //Americano 15%\n        //Asiatico 5%\n        //Europeo 30%\n        resultado *= calcularMarca(marca);\n\n        //Basico aumenta 20%\n        //Completo 50%\n        resultado *= parseFloat(calculaPlan(plan)).toFixed(2)\n        //Total\n        \n        setCargando(true)\n        setTimeout(() => {\n            setCargando(false);\n            setDatos({\n                resultado: Number(resultado),\n                datos: Formulario\n            })\n        }, 3000)\n    };\n    return (\n        <Fragment>\n            {Error ? <CError>Todos los campos deben estar cargados</CError>: null}\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label>Marca</label>\n                    <select\n                        className=\"form-control\"\n                        name=\"marca\"\n                        value={marca}\n                        onChange={setInformation}\n                    >\n                        <option value=\"\">---Seleccione</option>\n                        <option value=\"americano\">Americano</option>\n                        <option value=\"europeo\">Europeo</option>\n                        <option value=\"asiatico\">Asiatico</option>\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label>Anho</label>\n                    <select\n                        className=\"form-control\"\n                        name=\"year\"\n                        value={year}\n                        onChange={setInformation}\n                    >\n                        <option value=\"\">-- Seleccione --</option>\n                        <option value=\"2021\">2021</option>\n                        <option value=\"2020\">2020</option>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2018\">2018</option>\n                        <option value=\"2017\">2017</option>\n                        <option value=\"2016\">2016</option>\n                        <option value=\"2015\">2015</option>\n                        <option value=\"2014\">2014</option>\n                        <option value=\"2013\">2013</option>\n                        <option value=\"2012\">2012</option>\n                    </select>\n                </div>\n\n                <div className=\"form-group mb-5\">\n                    <label className=\"d-block \">Plan</label>\n                    <input\n                        type=\"radio\"\n                        className=\"mx-3\"\n                        name=\"plan\"\n                        value=\"basico\"\n                        checked={plan === \"basico\"}\n                        onChange={setInformation}\n                    />\n                    Basico\n                    <input\n                        type=\"radio\"\n                        className=\"mx-3\"\n                        name=\"plan\"\n                        value=\"completo\"\n                        checked={plan === \"completo\"}\n                        onChange={setInformation}\n                    />\n                    Completo\n                </div>\n\n                <Button type=\"submit\">Cotizar el Seguro</Button>\n            </form>\n        </Fragment>\n    );\n};\n\nFormulario.propTypes ={ \n    setDatos: PropTypes.func.isRequired,\n    setCargando: PropTypes.func.isRequired\n}\n\nexport default Formulario;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { TransitionGroup, CSSTransition} from \"react-transition-group\"\nimport Proptypes from \"prop-types\"\n\nconst Mensaje = styled.p`\n    background-color: rgb(127, 224, 237);\n    margin-top: 2rem;\n    padding: 1rem;\n    text-align: center;\n`;\n\nconst DivCotizacion = styled.p`\n    text-align: center;\n    padding: 0.5rem;\n    border: 1px solid #26c6da;\n    background-color: rgb(127, 224, 237);\n    margin-top: 1rem;\n    position: relative;\n`;\n\nconst Cotizacion = styled.p`\n    color: #00838f;\n    padding: 1rem;\n    text-transform: uppercase;\n    font-weight: bold;\n    margin: 0;\n`;\n\nconst Resultado = ({ resultado }) => {\n    return resultado === 0 ? (\n        <Mensaje>\n            Seleccione la marca y el anho de su vehiculo junto con el plan que\n            desea contratar\n        </Mensaje>\n    ) : (\n        <DivCotizacion>\n            <TransitionGroup\n                component=\"span\"\n                className='resultado'\n            >\n                <CSSTransition\n                    classNames=\"resultado\"\n                    key={resultado}\n                    timeout={{enter: 500, exit: 500}}\n                >\n                    <Cotizacion>Costo del Seguro: <span>{resultado}</span></Cotizacion>\n                </CSSTransition>\n            </TransitionGroup>\n        </DivCotizacion>\n    );\n};\n\nResultado.propTypes = {\n    resultado: Proptypes.number.isRequired,\n}\nexport default Resultado;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { aMayuscula } from \"../Helper.js\";\nimport PropTypes from \"prop-types\";\n\nconst CResumen = styled.div`\n    padding: 1rem;\n    text-align: center;\n    background-color: #00838f;\n    color: #fff;\n    margin-top: 1rem;\n`;\n\nconst Resumen = ({ datos }) => {\n    const { marca, year, plan } = datos;\n    if (marca === \"\" || year === \"\" || plan === \"\") {\n        return null;\n    }\n\n    return (\n        <CResumen>\n            <h2>Resumen del Auto</h2>\n            <p>Marca: {aMayuscula(marca)}</p>\n            <p>Plan: {aMayuscula(plan)}</p>\n            <p>Anho: {year}</p>\n        </CResumen>\n    );\n};\n\nResumen.propTypes = {\n    datos: PropTypes.object.isRequired,\n};\n\nexport default Resumen;\n","import React from 'react'\nimport \"./Spinner.css\"\n\nconst Spinner = () => {\n    return (\n        <div className=\"spinner\">\n  <div className=\"double-bounce1\"></div>\n  <div className=\"double-bounce2\"></div>\n</div>\n    )\n}\n\nexport default Spinner;","import React, { useState, Fragment } from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Resultado from \"./components/Resultado\";\nimport Resumen from \"./components/Resumen\";\nimport Spinner from \"./components/Spinner\";\n\nimport styled from \"@emotion/styled\";\n\nconst Contenedor = styled.div`\n    max-width: 600px;\n    margin: 0 auto;\n`;\nconst ConFormulario = styled.div`\n    background-color: #fff;\n    padding: 3rem;\n`;\n\nfunction App() {\n    //state de principal\n    const [Datos, setDatos] = useState({\n        resultado: 0,\n        datos: {\n            marca: \"\",\n            year: \"\",\n            plan: \"\",\n        },\n    });\n\n    //para spinner\n    const [cargando, setCargando] = useState(false);\n\n    const { resultado, datos } = Datos;\n    return (\n        <Contenedor>\n            <Header titulo={\"Cotizador de Seguros\"} />\n            <ConFormulario>\n                <Formulario setDatos={setDatos} setCargando={setCargando} />\n                {cargando ? (\n                    <Spinner />\n                ) : (\n                    <Fragment>\n                        <Resumen datos={datos} />\n                        <Resultado resultado={resultado} />\n                    </Fragment>\n                )}\n            </ConFormulario>\n        </Contenedor>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}